# n개의 공을 k개의 바구니에 나눠 담아야 하고, n개의 공을 k개의 바구니에 빠짐없이 나누어 담는다.
# 각 바구니에는 1개 이상의 공이 있어야 하고, 바구니에 담긴 공의 개수가 모두 달라야 한다.
# 규칙을 모두 만족하며 n개의 공을 k개의 바구니에 나눠 담을 때, 나눠 담을 수 있는지 여부를 결정하고
# 담을 수 있는 경우에는 가장 많이 담긴 바구니와 가장 적게 담긴 바구니의 공의 개수 차이를 계산해서 출력

# 내가 푼 코드
# k개의 바구니에 담을 수 있는 공들의 합 중 최소값을 구한다.
# 첫 번째 바구니에 담기는 공의 최솟값은 1이고, 바구니에 담긴 공의 개수가 모두 달라야하므로 1씩 늘려가며 바구니에 공을 담을 수 있다.
# 이때, 바구니에 담기는 공의 합을 구하면 등차수열로 구할 수 있다.

# 만약, 바구니에 담을 수 있는 공들의 합이 n보다 크다면 주어진 공으로 바구니를 채울 수 없으므로 -1을 출력해준다.
# 공의 개수 n에서 바구니에 담기는 공의 합을 뺀 값이 바구니의 개수 k의 배수이면 모든 바구니에 공이 1씩 차이나게 담기므로 바구니에 담긴 공의 최솟값은 1이고 최댓값은 k가 된다.
# 반대로 k의 배수가 아니라면 공의 개수 차는 k가 된다.

n, k = map(int, input().split())

basket_ball = k * (k+1) // 2

if n < basket_ball:
  print(-1)

else:
  if (n - basket_ball) % k == 0:
    print(k-1)
  else: 
    print(k)
