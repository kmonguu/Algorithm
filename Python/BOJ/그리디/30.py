# 입력받은 N이 30의 배수가 되는 가장 큰 수로 출력

# 풀이
# N을 리스트형으로 받아 내림차순으로 정렬한다.
# 30의 배수라는 말은 10의 배수도 되므로 항상 끝이 0이 오기 때문에 입력받은 N에 0이 있는지를 먼저 확인해준다.
# 0이 있다면 N이 30으로 나누어 나머지가 0이 되는지 확인하고 나누어떨어진다면 N을 출력하고 나누어 떨어지지 않는다면 -1을 출력


# 코드

N = sorted(input().strip(), reverse=True) 
result = -1                                         # N이 나누어 떨어지지 않을 경우 출력하기 위해 result에 -1을 저장한다.

if min(N) == '0':                                   # N이 10의 배수임을 확인하기 위해 N에 0이 있는지를 확인
  N = int(''.join(N))                               # 0이 있다면 N을 정수형으로 변환

  if N % 30 == 0:                                   # N이 30의 배수인지 확인하기 위해 30으로 나누었을 때 나머지가 0이 되는지 확인
    result = N                                      # 나머지가 0이라면 N은 30의  result에 N을 저장

print(result)
    

  
# 다른 풀이
# 끝자리가 0이면 끝자리를 제외한 수가 3으로 나누어 떨어져야 30의 배수
# 끝자리를 제외한 각 자리의 숫자의 합이 3으로 나누어 떨어지는 지 확인하면 된다.

n = sorted(input(), reverse=True)               # 입력 받으면서 바로 내림차순 정렬

if n[-1] != "0":                                # 정렬된 n의 끝자리가 0이 아니면 -1 출력
  print(-1)
else:                                           # 정렬된 n의 끝자리가 0이라면
  total = sum(map(int, n))                      # 각 자리의 숫자 합 구하기
  if (total % 3 == 0):                          # 각 자리의 숫자 합이 3으로 나누어 떨어진다면
    print("".join(n))                           # 내림차순 정렬한 n 출력
  else:                                         # 3으로 나누어 떨어지지 않는다면 3의 배수가 아니므로 -1 출력
    print(-1)
    
    
# 리팩토링

n = sorted(input(), reverse=True)

total = sum(map(int, n))                        # 각 자리의 숫자 합 구하기
if n[-1] != "0" or total % 3 != 0:              # 끝자리가 0이 아니거나 3의 배수가 아니면 -1 출력
  print(-1)
else:                                           # 30의 배수면 n 출력
  print("".join(n))
  
  
  
# 다른 풀이

n = "".join(sorted(input(), reverse=True))      # 입력 받은 수 내림차순 정렬 후 문자열로 변환
print(n if int(n) % 30 == 0 else -1)            # 30으로 나누어 떨어진다면 n 출력, 30으로 나누어 떨어지지 않는다면 -1
 
