# 어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 한다.
# 문자열 s와 거리 n이 매개 변수로 주어질 때, s를 n만큼 민 암호문을 반환

# 내가 푼 코드 (인터넷 참고)
# 문자열을 순회하며 내장함수 ord를 이용하여 아스키 코드로 바꾸어 n만큼 더한 값을 다시 문자열로 바꾸는 방법을 생각함
# 만약, 'z'일 때 'a'가 반환되지 않아 인터넷을 참고함
# 해당 문자열을 아스키 코드로 바꾼 뒤, 대소문자를 구분하여 각각 'a'와 'A'를 뺀 값에서 n을 더한다.
# 위에서 나온 값에서 26을 나눈 나머지를 구하여 문자열로 변환하면 'z'일 때 'a'가 반환되도록 알파벳을 순환할 수 있다.

def solution(s, n):
    s = list(s)
    for i in range(len(s)):
        if s[i].isupper():
            s[i] = chr((ord(s[i]) - ord('A') + n) % 26 + ord('A'))
            
        elif s[i].islower():
            s[i] = chr((ord(s[i]) - ord('a') + n) % 26 + ord('a'))
            
    return ''.join(s)
